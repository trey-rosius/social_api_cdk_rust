schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  generatePostImages(prompt: String!): String! @aws_cognito_user_pools
  getPost(id: String!): Post! @aws_cognito_user_pools @aws_api_key
  getAllPosts(limit: Int!, nextToken: String): PostsResult!
    @aws_cognito_user_pools
    @aws_api_key
  getUserAccount(id: String!): User! @aws_cognito_user_pools
  getUserByEmail(email: String!): User! @aws_cognito_user_pools @aws_api_key

  getCommentsPerPost(
    postId: String!
    limit: Int!
    nextToken: String
  ): PostCommentsResult! @aws_cognito_user_pools @aws_api_key
  getUserFollowers(
    userId: String
    nextToken: String
    limit: Int!
  ): FollowerResult! @aws_cognito_user_pools
}

type Mutation {
  createUserAccount(userInput: CreateUserInput!): User! @aws_cognito_user_pools
  updateUserAccount(userInput: UpdateUserInput!): User! @aws_cognito_user_pools
  createPost(postInput: CreatePostInput!): Post!
    @aws_cognito_user_pools
    @aws_api_key
  updatePost(postInput: UpdatePostInput!): Post! @aws_cognito_user_pools
  deletePost(userId: String!, postId: String!): Boolean! @aws_cognito_user_pools
  createComment(commentInput: CreateCommentInput!): Comment!
    @aws_cognito_user_pools
    @aws_api_key

  followUser(followerId: String!, followingId: String!): Follow!
    @aws_cognito_user_pools
}

type User @aws_cognito_user_pools @aws_api_key {
  id: String!
  username: String!
  firstName: String!
  lastName: String!
  userType: USERTYPE!
  about: String!
  address: Address
  email: AWSEmail!
  profilePicUrl: String!
  profilePicKey: String!
  createdOn: AWSTimestamp
  updatedOn: AWSTimestamp
}

input CreateUserInput @aws_cognito_user_pools {
  username: String!
  firstName: String!
  lastName: String!
  about: String!
  email: AWSEmail!
  userType: USERTYPE!
  profilePicKey: String!
  profilePicUrl: String!
}
input UpdateUserInput @aws_cognito_user_pools {
  id: String!
  username: String!
  profilePicKey: String!
  profilePicUrl: String!
  address: AddressInput!
}
type Address @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}
input CreatePostInput @aws_cognito_user_pools @aws_api_key {
  content: String!
  userId: String!
  imageKeys: [String!]!
  imageUrls: [String!]!
}

input UpdatePostInput @aws_cognito_user_pools {
  id: String!
  userId: String
  content: String
  imageKeys: [String!]!
  imageUrls: [String!]!
}
type Post @aws_cognito_user_pools @aws_api_key {
  id: String!
  userId: String!
  user: User!
  content: String!
  comments: [Comment!]
  imageKeys: [String!]!
  imageUrls: [String!]!
  createdOn: AWSTimestamp!
  updatedOn: AWSTimestamp
}

type PostsResult @aws_cognito_user_pools @aws_api_key {
  items: [Post!]!
  nextToken: String
}
input AddressInput @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}
type Follow @aws_cognito_user_pools {
  followerId: String!
  followingId: String!
}
type FollowerResult @aws_cognito_user_pools {
  items: [User!]!
  nextToken: String
}
enum USERTYPE {
  ADMIN
  MEMBER
}
type Comment @aws_cognito_user_pools @aws_api_key {
  id: String!
  user: User
  userId: String!
  postId: String!
  comment: String!
  createdOn: AWSTimestamp!
  updatedOn: AWSTimestamp
}

input CreateCommentInput @aws_cognito_user_pools @aws_api_key {
  userId: String!

  postId: String!
  comment: String!
}
type PostCommentsResult @aws_cognito_user_pools @aws_api_key {
  items: [Comment!]!
  nextToken: String
}

type Subscription {
  createdPost: Post
    @aws_subscribe(mutations: ["createPost"])
    @aws_cognito_user_pools
  createdComment: Comment
    @aws_subscribe(mutations: ["createComment"])
    @aws_cognito_user_pools
}
